内存保护：
可执行空间保护：
对于一个进程使用的内存，只把其中的指令部分设置成“可执行”的，对于其他部分，比如数据部分，不给予“可执行”的权限。因为无论是指令，还是数据，在 CPU 看来，都是二进制的数据。直接把数据部分拿给 CPU，如果这些数据解码后，也能变成一条合理的指令，其实就是可执行的。这个时候，黑客在程序的数据区里，放入一些要执行的指令编码后的数据，然后找到一个办法，让 CPU 去把它们当成指令去加载，那 CPU 就能执行黑客想要执行的指令了。
对进程里内存空间的执行权限进行控制，可以使得 CPU 只能执行指令区域的代码。对于数据区域的内容，即使找到了其他漏洞想要加载成指令来执行，也会因为没有权限而被阻挡掉。
类似sql注入攻击，如果服务端执行的 SQL 脚本是通过字符串拼出来的，在 Web 请求里面传输的参数就可以藏下一些想要执行的 SQL 参数，让服务器执行一些恶意拼装的 SQL。就会导致数据库里的数据被恶意修改和泄露。
地址空间布局随机化：
可执行空间保护，确保了cpu只执行当前进程中保护空间内的数据和指令，如果其他的人、进程通过一定手段修改掉特定进程的指令、数据，然后，让当前进程去执行这些指令和数据，造成破坏。
要想修改这些指令和数据，需要知道这些指令和数据所在的位置才行。原先一个进程的内存布局空间是固定的，所以任何第三方很容易就能知道指令在哪里，程序栈在哪里，数据在哪里，堆又在哪里。
地址空间布局随机可以让这些区域的位置不再固定，在内存空间随机去分配这些进程里不同部分所在的内存空间地址，让破坏者猜不出来。这里的随机化是指虚拟地址的乱序。
因为通过程序或者系统漏洞往进程里面注入代码，针对改写的也是虚拟内存地址，所以虚拟内存地址的布局是发生了变化的。而不是物理地址的变化，因为物理内存地址的分配本来就不是固定的，相当于已经随机化过；

