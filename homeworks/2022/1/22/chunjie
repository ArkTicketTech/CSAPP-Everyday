chap 3.10.4 对抗缓冲区溢出攻击
  3.限制可执行代码区域
    最后是消除攻击者向系统中插入可执行代码的能力，可以通过限制哪些内存区域可以存放可执行代码来实现。
    典型的是限制只有保存编译器产生的代码的那部分内存才是需要可执行的。以前 x86 将读和执行用一位来表示，现在 AMD 和 Intel 都引入了 NX 位将执行区分开。
    
chap 3.10.5 支持变长栈帧
  调用 alloca 方法来在栈上分配一个变长数组时，编译器无法在执行前知晓需要分配的空间大小。
  为了管理变长栈帧，x86 使用 %rbp 作为帧指针。使用时栈帧结构和函数调用类似。%rbp 的值会被压入栈中，然后 %rbp 会一直指向这个地址。
  局部变量会用相对于 %rbp 中值的偏移量来引用。
  函数释放时相当于会弹出 2 次 %rbp 的值来返回到调用函数。
