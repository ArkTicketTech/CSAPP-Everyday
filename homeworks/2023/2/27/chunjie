8.5.5 编写信号处理程序
  信号处理是 linux 系统编程最棘手的问题之一，处理程序和主程序是并发运行的，共享同样的全局变量；如何以及何时接受信号通常有违直觉；不同系统有不同的信号语义。
  信号处理程序要尽可能简单，并只调用异步信号安全的函数，例如唯一安全产生输出的方法是 write 函数。
  需要返回 errno 的程序需要在进入程序的时候先进行保存，退出时进行恢复避免程序对 errno 造成变化。
  处理程序应该阻塞信号，保护对共享全局数据结构的访问。
  用 volatile 声明全局变量防止编译器在主程序中进行优化。
  用 sig_atomic_t 声明 flag 防止读写被打算造成信号消费问题。
  
  未处理的信号是不排队的，因为同种的信号产生的效果是相同的。
  因此信号的数量是不可靠的，不可以用信号来对其他进程中发送的事件计数（例如通过收到信号的数量回收相应数量的子进程）。
  
  unix 不同系统有不同的信号处理语义，因此 posix 定义允许用户在设置信号处理时指定想要的信号处理语义。
