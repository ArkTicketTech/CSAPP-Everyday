5.3 程序示例
这里提供了一段程序，用来计算向量的和或者是乘积。
程序本身并不复杂，主要是来看几个问题。
首先是可以发现，浮点数和整数的CPE不同，这个是在预期内的。
同时可以看出，即便只用O1级别的编译器优化，也可以得到显著的性能提升。
一般来说，优化级别越高，生成的可执行文件越大。
5.4 消除循环的低效率
代码移动是一种简单有效的优化策略，即将循环中不变的数值提前计算，免去了每次都要重新计算的问题。
这里可以看出两个代码的对比，在字符串很长的时候会差距巨大。
其实这里也提醒了我们，有时候我们在写代码的时候，只会考虑“可能的情况
但实际上，很多时候代码的区别运行情况会超出我们的预期
比如一个设计用来算长度几百以内的向量和的代码，可能最终运行在一个几万甚至更长的向量上
包括用户id如果使用int类型，很可能在某一天就超出了范围
北海啊，要多想

p353
